// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto

#ifndef PROTOBUF_master_2eproto__INCLUDED
#define PROTOBUF_master_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace master {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_master_2eproto();
void protobuf_AssignDesc_master_2eproto();
void protobuf_ShutdownFile_master_2eproto();

class AddressReply;
class Empty;
class MemTableInfoMaster;
class MemTableInfoReply;
class NodeIndexRequest;
class NodeInfo;
class NodesInfoReply;
class NodesStatusReply;
class UserNameRequest;

// ===================================================================

class UserNameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.UserNameRequest) */ {
 public:
  UserNameRequest();
  virtual ~UserNameRequest();

  UserNameRequest(const UserNameRequest& from);

  inline UserNameRequest& operator=(const UserNameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserNameRequest& default_instance();

  void Swap(UserNameRequest* other);

  // implements Message ----------------------------------------------

  inline UserNameRequest* New() const { return New(NULL); }

  UserNameRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserNameRequest& from);
  void MergeFrom(const UserNameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserNameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:master.UserNameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static UserNameRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddressReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.AddressReply) */ {
 public:
  AddressReply();
  virtual ~AddressReply();

  AddressReply(const AddressReply& from);

  inline AddressReply& operator=(const AddressReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressReply& default_instance();

  void Swap(AddressReply* other);

  // implements Message ----------------------------------------------

  inline AddressReply* New() const { return New(NULL); }

  AddressReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddressReply& from);
  void MergeFrom(const AddressReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddressReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:master.AddressReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static AddressReply* default_instance_;
};
// -------------------------------------------------------------------

class MemTableInfoMaster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.MemTableInfoMaster) */ {
 public:
  MemTableInfoMaster();
  virtual ~MemTableInfoMaster();

  MemTableInfoMaster(const MemTableInfoMaster& from);

  inline MemTableInfoMaster& operator=(const MemTableInfoMaster& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemTableInfoMaster& default_instance();

  void Swap(MemTableInfoMaster* other);

  // implements Message ----------------------------------------------

  inline MemTableInfoMaster* New() const { return New(NULL); }

  MemTableInfoMaster* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemTableInfoMaster& from);
  void MergeFrom(const MemTableInfoMaster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemTableInfoMaster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 buffer_length = 1;
  void clear_buffer_length();
  static const int kBufferLengthFieldNumber = 1;
  ::google::protobuf::uint64 buffer_length() const;
  void set_buffer_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:master.MemTableInfoMaster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 buffer_length_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static MemTableInfoMaster* default_instance_;
};
// -------------------------------------------------------------------

class MemTableInfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.MemTableInfoReply) */ {
 public:
  MemTableInfoReply();
  virtual ~MemTableInfoReply();

  MemTableInfoReply(const MemTableInfoReply& from);

  inline MemTableInfoReply& operator=(const MemTableInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemTableInfoReply& default_instance();

  void Swap(MemTableInfoReply* other);

  // implements Message ----------------------------------------------

  inline MemTableInfoReply* New() const { return New(NULL); }

  MemTableInfoReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemTableInfoReply& from);
  void MergeFrom(const MemTableInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemTableInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .master.MemTableInfoMaster> nodememinfo = 1;
  int nodememinfo_size() const;
  void clear_nodememinfo();
  static const int kNodememinfoFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::master::MemTableInfoMaster >&
      nodememinfo() const;
  ::google::protobuf::Map< ::std::string, ::master::MemTableInfoMaster >*
      mutable_nodememinfo();

  // @@protoc_insertion_point(class_scope:master.MemTableInfoReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::master::MemTableInfoMaster,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      MemTableInfoReply_NodememinfoEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::master::MemTableInfoMaster,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nodememinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static MemTableInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class NodesStatusReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.NodesStatusReply) */ {
 public:
  NodesStatusReply();
  virtual ~NodesStatusReply();

  NodesStatusReply(const NodesStatusReply& from);

  inline NodesStatusReply& operator=(const NodesStatusReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodesStatusReply& default_instance();

  void Swap(NodesStatusReply* other);

  // implements Message ----------------------------------------------

  inline NodesStatusReply* New() const { return New(NULL); }

  NodesStatusReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodesStatusReply& from);
  void MergeFrom(const NodesStatusReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodesStatusReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bool> nodesstatus = 1;
  int nodesstatus_size() const;
  void clear_nodesstatus();
  static const int kNodesstatusFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, bool >&
      nodesstatus() const;
  ::google::protobuf::Map< ::std::string, bool >*
      mutable_nodesstatus();

  // @@protoc_insertion_point(class_scope:master.NodesStatusReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
      0 >
      NodesStatusReply_NodesstatusEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
      0 > nodesstatus_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static NodesStatusReply* default_instance_;
};
// -------------------------------------------------------------------

class NodeIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.NodeIndexRequest) */ {
 public:
  NodeIndexRequest();
  virtual ~NodeIndexRequest();

  NodeIndexRequest(const NodeIndexRequest& from);

  inline NodeIndexRequest& operator=(const NodeIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeIndexRequest& default_instance();

  void Swap(NodeIndexRequest* other);

  // implements Message ----------------------------------------------

  inline NodeIndexRequest* New() const { return New(NULL); }

  NodeIndexRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeIndexRequest& from);
  void MergeFrom(const NodeIndexRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:master.NodeIndexRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static NodeIndexRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  void Swap(NodeInfo* other);

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const { return New(NULL); }

  NodeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_list = 1;
  void clear_user_list();
  static const int kUserListFieldNumber = 1;
  const ::std::string& user_list() const;
  void set_user_list(const ::std::string& value);
  void set_user_list(const char* value);
  void set_user_list(const char* value, size_t size);
  ::std::string* mutable_user_list();
  ::std::string* release_user_list();
  void set_allocated_user_list(::std::string* user_list);

  // optional uint64 user_number = 2;
  void clear_user_number();
  static const int kUserNumberFieldNumber = 2;
  ::google::protobuf::uint64 user_number() const;
  void set_user_number(::google::protobuf::uint64 value);

  // optional string buffer = 3;
  void clear_buffer();
  static const int kBufferFieldNumber = 3;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  void set_buffer(const char* value);
  void set_buffer(const char* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // optional bool status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  bool status() const;
  void set_status(bool value);

  // optional uint64 buffer_length = 5;
  void clear_buffer_length();
  static const int kBufferLengthFieldNumber = 5;
  ::google::protobuf::uint64 buffer_length() const;
  void set_buffer_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:master.NodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_list_;
  ::google::protobuf::uint64 user_number_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  ::google::protobuf::uint64 buffer_length_;
  bool status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static NodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class NodesInfoReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.NodesInfoReply) */ {
 public:
  NodesInfoReply();
  virtual ~NodesInfoReply();

  NodesInfoReply(const NodesInfoReply& from);

  inline NodesInfoReply& operator=(const NodesInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodesInfoReply& default_instance();

  void Swap(NodesInfoReply* other);

  // implements Message ----------------------------------------------

  inline NodesInfoReply* New() const { return New(NULL); }

  NodesInfoReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodesInfoReply& from);
  void MergeFrom(const NodesInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodesInfoReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .master.NodeInfo> nodeinfo = 1;
  int nodeinfo_size() const;
  void clear_nodeinfo();
  static const int kNodeinfoFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::master::NodeInfo >&
      nodeinfo() const;
  ::google::protobuf::Map< ::std::string, ::master::NodeInfo >*
      mutable_nodeinfo();

  // @@protoc_insertion_point(class_scope:master.NodesInfoReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::master::NodeInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      NodesInfoReply_NodeinfoEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::master::NodeInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nodeinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static NodesInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:master.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:master.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_master_2eproto();
  friend void protobuf_AssignDesc_master_2eproto();
  friend void protobuf_ShutdownFile_master_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserNameRequest

// optional string username = 1;
inline void UserNameRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserNameRequest::username() const {
  // @@protoc_insertion_point(field_get:master.UserNameRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserNameRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:master.UserNameRequest.username)
}
inline void UserNameRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:master.UserNameRequest.username)
}
inline void UserNameRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:master.UserNameRequest.username)
}
inline ::std::string* UserNameRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:master.UserNameRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserNameRequest::release_username() {
  // @@protoc_insertion_point(field_release:master.UserNameRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserNameRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:master.UserNameRequest.username)
}

// -------------------------------------------------------------------

// AddressReply

// optional string addr = 1;
inline void AddressReply::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddressReply::addr() const {
  // @@protoc_insertion_point(field_get:master.AddressReply.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressReply::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:master.AddressReply.addr)
}
inline void AddressReply::set_addr(const char* value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:master.AddressReply.addr)
}
inline void AddressReply::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:master.AddressReply.addr)
}
inline ::std::string* AddressReply::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:master.AddressReply.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddressReply::release_addr() {
  // @@protoc_insertion_point(field_release:master.AddressReply.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddressReply::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:master.AddressReply.addr)
}

// -------------------------------------------------------------------

// MemTableInfoMaster

// optional uint64 buffer_length = 1;
inline void MemTableInfoMaster::clear_buffer_length() {
  buffer_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemTableInfoMaster::buffer_length() const {
  // @@protoc_insertion_point(field_get:master.MemTableInfoMaster.buffer_length)
  return buffer_length_;
}
inline void MemTableInfoMaster::set_buffer_length(::google::protobuf::uint64 value) {
  
  buffer_length_ = value;
  // @@protoc_insertion_point(field_set:master.MemTableInfoMaster.buffer_length)
}

// -------------------------------------------------------------------

// MemTableInfoReply

// map<string, .master.MemTableInfoMaster> nodememinfo = 1;
inline int MemTableInfoReply::nodememinfo_size() const {
  return nodememinfo_.size();
}
inline void MemTableInfoReply::clear_nodememinfo() {
  nodememinfo_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::master::MemTableInfoMaster >&
MemTableInfoReply::nodememinfo() const {
  // @@protoc_insertion_point(field_map:master.MemTableInfoReply.nodememinfo)
  return nodememinfo_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::master::MemTableInfoMaster >*
MemTableInfoReply::mutable_nodememinfo() {
  // @@protoc_insertion_point(field_mutable_map:master.MemTableInfoReply.nodememinfo)
  return nodememinfo_.MutableMap();
}

// -------------------------------------------------------------------

// NodesStatusReply

// map<string, bool> nodesstatus = 1;
inline int NodesStatusReply::nodesstatus_size() const {
  return nodesstatus_.size();
}
inline void NodesStatusReply::clear_nodesstatus() {
  nodesstatus_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, bool >&
NodesStatusReply::nodesstatus() const {
  // @@protoc_insertion_point(field_map:master.NodesStatusReply.nodesstatus)
  return nodesstatus_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, bool >*
NodesStatusReply::mutable_nodesstatus() {
  // @@protoc_insertion_point(field_mutable_map:master.NodesStatusReply.nodesstatus)
  return nodesstatus_.MutableMap();
}

// -------------------------------------------------------------------

// NodeIndexRequest

// optional uint64 index = 1;
inline void NodeIndexRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeIndexRequest::index() const {
  // @@protoc_insertion_point(field_get:master.NodeIndexRequest.index)
  return index_;
}
inline void NodeIndexRequest::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:master.NodeIndexRequest.index)
}

// -------------------------------------------------------------------

// NodeInfo

// optional string user_list = 1;
inline void NodeInfo::clear_user_list() {
  user_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::user_list() const {
  // @@protoc_insertion_point(field_get:master.NodeInfo.user_list)
  return user_list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_user_list(const ::std::string& value) {
  
  user_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:master.NodeInfo.user_list)
}
inline void NodeInfo::set_user_list(const char* value) {
  
  user_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:master.NodeInfo.user_list)
}
inline void NodeInfo::set_user_list(const char* value, size_t size) {
  
  user_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:master.NodeInfo.user_list)
}
inline ::std::string* NodeInfo::mutable_user_list() {
  
  // @@protoc_insertion_point(field_mutable:master.NodeInfo.user_list)
  return user_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_user_list() {
  // @@protoc_insertion_point(field_release:master.NodeInfo.user_list)
  
  return user_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_user_list(::std::string* user_list) {
  if (user_list != NULL) {
    
  } else {
    
  }
  user_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_list);
  // @@protoc_insertion_point(field_set_allocated:master.NodeInfo.user_list)
}

// optional uint64 user_number = 2;
inline void NodeInfo::clear_user_number() {
  user_number_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeInfo::user_number() const {
  // @@protoc_insertion_point(field_get:master.NodeInfo.user_number)
  return user_number_;
}
inline void NodeInfo::set_user_number(::google::protobuf::uint64 value) {
  
  user_number_ = value;
  // @@protoc_insertion_point(field_set:master.NodeInfo.user_number)
}

// optional string buffer = 3;
inline void NodeInfo::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeInfo::buffer() const {
  // @@protoc_insertion_point(field_get:master.NodeInfo.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:master.NodeInfo.buffer)
}
inline void NodeInfo::set_buffer(const char* value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:master.NodeInfo.buffer)
}
inline void NodeInfo::set_buffer(const char* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:master.NodeInfo.buffer)
}
inline ::std::string* NodeInfo::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:master.NodeInfo.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_buffer() {
  // @@protoc_insertion_point(field_release:master.NodeInfo.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:master.NodeInfo.buffer)
}

// optional bool status = 4;
inline void NodeInfo::clear_status() {
  status_ = false;
}
inline bool NodeInfo::status() const {
  // @@protoc_insertion_point(field_get:master.NodeInfo.status)
  return status_;
}
inline void NodeInfo::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:master.NodeInfo.status)
}

// optional uint64 buffer_length = 5;
inline void NodeInfo::clear_buffer_length() {
  buffer_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeInfo::buffer_length() const {
  // @@protoc_insertion_point(field_get:master.NodeInfo.buffer_length)
  return buffer_length_;
}
inline void NodeInfo::set_buffer_length(::google::protobuf::uint64 value) {
  
  buffer_length_ = value;
  // @@protoc_insertion_point(field_set:master.NodeInfo.buffer_length)
}

// -------------------------------------------------------------------

// NodesInfoReply

// map<string, .master.NodeInfo> nodeinfo = 1;
inline int NodesInfoReply::nodeinfo_size() const {
  return nodeinfo_.size();
}
inline void NodesInfoReply::clear_nodeinfo() {
  nodeinfo_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::master::NodeInfo >&
NodesInfoReply::nodeinfo() const {
  // @@protoc_insertion_point(field_map:master.NodesInfoReply.nodeinfo)
  return nodeinfo_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::master::NodeInfo >*
NodesInfoReply::mutable_nodeinfo() {
  // @@protoc_insertion_point(field_mutable_map:master.NodesInfoReply.nodeinfo)
  return nodeinfo_.MutableMap();
}

// -------------------------------------------------------------------

// Empty

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace master

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_master_2eproto__INCLUDED
