// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "backend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace backend {

namespace {

const ::google::protobuf::Descriptor* GetFileListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileListReply_FilelistEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_backend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_backend_2eproto() {
  protobuf_AddDesc_backend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "backend.proto");
  GOOGLE_CHECK(file != NULL);
  GetFileListRequest_descriptor_ = file->message_type(0);
  static const int GetFileListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListRequest, foldername_),
  };
  GetFileListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFileListRequest_descriptor_,
      GetFileListRequest::default_instance_,
      GetFileListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFileListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListRequest, _is_default_instance_));
  GetFileListReply_descriptor_ = file->message_type(1);
  static const int GetFileListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListReply, filelist_),
  };
  GetFileListReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetFileListReply_descriptor_,
      GetFileListReply::default_instance_,
      GetFileListReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetFileListReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListReply, _is_default_instance_));
  GetFileListReply_FilelistEntry_descriptor_ = GetFileListReply_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_backend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFileListRequest_descriptor_, &GetFileListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetFileListReply_descriptor_, &GetFileListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GetFileListReply_FilelistEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                GetFileListReply_FilelistEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_backend_2eproto() {
  delete GetFileListRequest::default_instance_;
  delete GetFileListRequest_reflection_;
  delete GetFileListReply::default_instance_;
  delete GetFileListReply_reflection_;
}

void protobuf_AddDesc_backend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_backend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rbackend.proto\022\007backend\"(\n\022GetFileListR"
    "equest\022\022\n\nfoldername\030\001 \001(\t\"~\n\020GetFileLis"
    "tReply\0229\n\010filelist\030\001 \003(\0132\'.backend.GetFi"
    "leListReply.FilelistEntry\032/\n\rFilelistEnt"
    "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\0012R\n\007St"
    "orage\022G\n\013GetFileList\022\033.backend.GetFileLi"
    "stRequest\032\031.backend.GetFileListReply\"\000B\006"
    "\242\002\003HLWb\006proto3", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "backend.proto", &protobuf_RegisterTypes);
  GetFileListRequest::default_instance_ = new GetFileListRequest();
  GetFileListReply::default_instance_ = new GetFileListReply();
  GetFileListRequest::default_instance_->InitAsDefaultInstance();
  GetFileListReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_backend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_backend_2eproto {
  StaticDescriptorInitializer_backend_2eproto() {
    protobuf_AddDesc_backend_2eproto();
  }
} static_descriptor_initializer_backend_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFileListRequest::kFoldernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFileListRequest::GetFileListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.GetFileListRequest)
}

void GetFileListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetFileListRequest::GetFileListRequest(const GetFileListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.GetFileListRequest)
}

void GetFileListRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  foldername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetFileListRequest::~GetFileListRequest() {
  // @@protoc_insertion_point(destructor:backend.GetFileListRequest)
  SharedDtor();
}

void GetFileListRequest::SharedDtor() {
  foldername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetFileListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileListRequest_descriptor_;
}

const GetFileListRequest& GetFileListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

GetFileListRequest* GetFileListRequest::default_instance_ = NULL;

GetFileListRequest* GetFileListRequest::New(::google::protobuf::Arena* arena) const {
  GetFileListRequest* n = new GetFileListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFileListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.GetFileListRequest)
  foldername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetFileListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.GetFileListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string foldername = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foldername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->foldername().data(), this->foldername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.GetFileListRequest.foldername"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:backend.GetFileListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.GetFileListRequest)
  return false;
#undef DO_
}

void GetFileListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.GetFileListRequest)
  // optional string foldername = 1;
  if (this->foldername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->foldername().data(), this->foldername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.GetFileListRequest.foldername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->foldername(), output);
  }

  // @@protoc_insertion_point(serialize_end:backend.GetFileListRequest)
}

::google::protobuf::uint8* GetFileListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.GetFileListRequest)
  // optional string foldername = 1;
  if (this->foldername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->foldername().data(), this->foldername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.GetFileListRequest.foldername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->foldername(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:backend.GetFileListRequest)
  return target;
}

int GetFileListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.GetFileListRequest)
  int total_size = 0;

  // optional string foldername = 1;
  if (this->foldername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->foldername());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.GetFileListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFileListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFileListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.GetFileListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.GetFileListRequest)
    MergeFrom(*source);
  }
}

void GetFileListRequest::MergeFrom(const GetFileListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.GetFileListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.foldername().size() > 0) {

    foldername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.foldername_);
  }
}

void GetFileListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.GetFileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileListRequest::CopyFrom(const GetFileListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.GetFileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileListRequest::IsInitialized() const {

  return true;
}

void GetFileListRequest::Swap(GetFileListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFileListRequest::InternalSwap(GetFileListRequest* other) {
  foldername_.Swap(&other->foldername_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFileListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileListRequest_descriptor_;
  metadata.reflection = GetFileListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFileListRequest

// optional string foldername = 1;
void GetFileListRequest::clear_foldername() {
  foldername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetFileListRequest::foldername() const {
  // @@protoc_insertion_point(field_get:backend.GetFileListRequest.foldername)
  return foldername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetFileListRequest::set_foldername(const ::std::string& value) {
  
  foldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.GetFileListRequest.foldername)
}
 void GetFileListRequest::set_foldername(const char* value) {
  
  foldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.GetFileListRequest.foldername)
}
 void GetFileListRequest::set_foldername(const char* value, size_t size) {
  
  foldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.GetFileListRequest.foldername)
}
 ::std::string* GetFileListRequest::mutable_foldername() {
  
  // @@protoc_insertion_point(field_mutable:backend.GetFileListRequest.foldername)
  return foldername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetFileListRequest::release_foldername() {
  // @@protoc_insertion_point(field_release:backend.GetFileListRequest.foldername)
  
  return foldername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetFileListRequest::set_allocated_foldername(::std::string* foldername) {
  if (foldername != NULL) {
    
  } else {
    
  }
  foldername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), foldername);
  // @@protoc_insertion_point(field_set_allocated:backend.GetFileListRequest.foldername)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFileListReply::kFilelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFileListReply::GetFileListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.GetFileListReply)
}

void GetFileListReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetFileListReply::GetFileListReply(const GetFileListReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.GetFileListReply)
}

void GetFileListReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filelist_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  filelist_.SetEntryDescriptor(
      &::backend::GetFileListReply_FilelistEntry_descriptor_);
}

GetFileListReply::~GetFileListReply() {
  // @@protoc_insertion_point(destructor:backend.GetFileListReply)
  SharedDtor();
}

void GetFileListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFileListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileListReply_descriptor_;
}

const GetFileListReply& GetFileListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

GetFileListReply* GetFileListReply::default_instance_ = NULL;

GetFileListReply* GetFileListReply::New(::google::protobuf::Arena* arena) const {
  GetFileListReply* n = new GetFileListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetFileListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.GetFileListReply)
  filelist_.Clear();
}

bool GetFileListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.GetFileListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> filelist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_filelist:
          GetFileListReply_FilelistEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&filelist_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.GetFileListReply.FilelistEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.GetFileListReply.FilelistEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_filelist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:backend.GetFileListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.GetFileListReply)
  return false;
#undef DO_
}

void GetFileListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.GetFileListReply)
  // map<string, string> filelist = 1;
  if (!this->filelist().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "backend.GetFileListReply.FilelistEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "backend.GetFileListReply.FilelistEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->filelist().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->filelist().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetFileListReply_FilelistEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(filelist_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetFileListReply_FilelistEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it) {
        entry.reset(filelist_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:backend.GetFileListReply)
}

::google::protobuf::uint8* GetFileListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.GetFileListReply)
  // map<string, string> filelist = 1;
  if (!this->filelist().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "backend.GetFileListReply.FilelistEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "backend.GetFileListReply.FilelistEntry.value");
      }
    };

    if (deterministic &&
        this->filelist().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->filelist().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<GetFileListReply_FilelistEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(filelist_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GetFileListReply_FilelistEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it) {
        entry.reset(filelist_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:backend.GetFileListReply)
  return target;
}

int GetFileListReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.GetFileListReply)
  int total_size = 0;

  // map<string, string> filelist = 1;
  total_size += 1 * this->filelist_size();
  {
    ::google::protobuf::scoped_ptr<GetFileListReply_FilelistEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->filelist().begin();
        it != this->filelist().end(); ++it) {
      entry.reset(filelist_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.GetFileListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetFileListReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetFileListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.GetFileListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.GetFileListReply)
    MergeFrom(*source);
  }
}

void GetFileListReply::MergeFrom(const GetFileListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.GetFileListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  filelist_.MergeFrom(from.filelist_);
}

void GetFileListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.GetFileListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileListReply::CopyFrom(const GetFileListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.GetFileListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileListReply::IsInitialized() const {

  return true;
}

void GetFileListReply::Swap(GetFileListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFileListReply::InternalSwap(GetFileListReply* other) {
  filelist_.Swap(&other->filelist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetFileListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileListReply_descriptor_;
  metadata.reflection = GetFileListReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetFileListReply

// map<string, string> filelist = 1;
int GetFileListReply::filelist_size() const {
  return filelist_.size();
}
void GetFileListReply::clear_filelist() {
  filelist_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
GetFileListReply::filelist() const {
  // @@protoc_insertion_point(field_map:backend.GetFileListReply.filelist)
  return filelist_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
GetFileListReply::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_map:backend.GetFileListReply.filelist)
  return filelist_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace backend

// @@protoc_insertion_point(global_scope)
