// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "backend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace backend {

namespace {

const ::google::protobuf::Descriptor* FileListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileListReply_FilelistEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileChunkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileChunkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileChunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_backend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_backend_2eproto() {
  protobuf_AddDesc_backend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "backend.proto");
  GOOGLE_CHECK(file != NULL);
  FileListRequest_descriptor_ = file->message_type(0);
  static const int FileListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileListRequest, foldername_),
  };
  FileListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileListRequest_descriptor_,
      FileListRequest::default_instance_,
      FileListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileListRequest, _is_default_instance_));
  FileListReply_descriptor_ = file->message_type(1);
  static const int FileListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileListReply, filelist_),
  };
  FileListReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileListReply_descriptor_,
      FileListReply::default_instance_,
      FileListReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileListReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileListReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileListReply, _is_default_instance_));
  FileListReply_FilelistEntry_descriptor_ = FileListReply_descriptor_->nested_type(0);
  FileInfo_descriptor_ = file->message_type(2);
  static const int FileInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, is_file_),
  };
  FileInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileInfo_descriptor_,
      FileInfo::default_instance_,
      FileInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _is_default_instance_));
  FileChunkRequest_descriptor_ = file->message_type(3);
  static const int FileChunkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunkRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunkRequest, filename_),
  };
  FileChunkRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileChunkRequest_descriptor_,
      FileChunkRequest::default_instance_,
      FileChunkRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileChunkRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunkRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunkRequest, _is_default_instance_));
  FileChunk_descriptor_ = file->message_type(4);
  static const int FileChunk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunk, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunk, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunk, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunk, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunk, data_),
  };
  FileChunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileChunk_descriptor_,
      FileChunk::default_instance_,
      FileChunk_offsets_,
      -1,
      -1,
      -1,
      sizeof(FileChunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunk, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileChunk, _is_default_instance_));
  Empty_descriptor_ = file->message_type(5);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_backend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileListRequest_descriptor_, &FileListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileListReply_descriptor_, &FileListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        FileListReply_FilelistEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::backend::FileInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                FileListReply_FilelistEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileInfo_descriptor_, &FileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileChunkRequest_descriptor_, &FileChunkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileChunk_descriptor_, &FileChunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_backend_2eproto() {
  delete FileListRequest::default_instance_;
  delete FileListRequest_reflection_;
  delete FileListReply::default_instance_;
  delete FileListReply_reflection_;
  delete FileInfo::default_instance_;
  delete FileInfo_reflection_;
  delete FileChunkRequest::default_instance_;
  delete FileChunkRequest_reflection_;
  delete FileChunk::default_instance_;
  delete FileChunk_reflection_;
  delete Empty::default_instance_;
  delete Empty_reflection_;
}

void protobuf_AddDesc_backend_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_backend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rbackend.proto\022\007backend\"%\n\017FileListRequ"
    "est\022\022\n\nfoldername\030\001 \001(\t\"\213\001\n\rFileListRepl"
    "y\0226\n\010filelist\030\001 \003(\0132$.backend.FileListRe"
    "ply.FilelistEntry\032B\n\rFilelistEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.backend.FileInf"
    "o:\0028\001\")\n\010FileInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007is_fi"
    "le\030\002 \001(\010\"6\n\020FileChunkRequest\022\020\n\010username"
    "\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t\"_\n\tFileChunk\022\020\n"
    "\010username\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t\022\016\n\006len"
    "gth\030\003 \001(\004\022\020\n\010filetype\030\004 \001(\t\022\014\n\004data\030\005 \001("
    "\014\"\007\n\005Empty2\262\002\n\007Storage\022A\n\013GetFileList\022\030."
    "backend.FileListRequest\032\026.backend.FileLi"
    "stReply\"\000\022<\n\016InsertFileList\022\030.backend.Fi"
    "leListRequest\032\016.backend.Empty\"\000\022/\n\007PutFi"
    "le\022\022.backend.FileChunk\032\016.backend.Empty\"\000"
    "\022:\n\007GetFile\022\031.backend.FileChunkRequest\032\022"
    ".backend.FileChunk\"\000\0229\n\nDeleteFile\022\031.bac"
    "kend.FileChunkRequest\032\016.backend.Empty\"\000B"
    "\006\242\002\003HLWb\006proto3", 735);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "backend.proto", &protobuf_RegisterTypes);
  FileListRequest::default_instance_ = new FileListRequest();
  FileListReply::default_instance_ = new FileListReply();
  FileInfo::default_instance_ = new FileInfo();
  FileChunkRequest::default_instance_ = new FileChunkRequest();
  FileChunk::default_instance_ = new FileChunk();
  Empty::default_instance_ = new Empty();
  FileListRequest::default_instance_->InitAsDefaultInstance();
  FileListReply::default_instance_->InitAsDefaultInstance();
  FileInfo::default_instance_->InitAsDefaultInstance();
  FileChunkRequest::default_instance_->InitAsDefaultInstance();
  FileChunk::default_instance_->InitAsDefaultInstance();
  Empty::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_backend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_backend_2eproto {
  StaticDescriptorInitializer_backend_2eproto() {
    protobuf_AddDesc_backend_2eproto();
  }
} static_descriptor_initializer_backend_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileListRequest::kFoldernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileListRequest::FileListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.FileListRequest)
}

void FileListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileListRequest::FileListRequest(const FileListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.FileListRequest)
}

void FileListRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  foldername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileListRequest::~FileListRequest() {
  // @@protoc_insertion_point(destructor:backend.FileListRequest)
  SharedDtor();
}

void FileListRequest::SharedDtor() {
  foldername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileListRequest_descriptor_;
}

const FileListRequest& FileListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

FileListRequest* FileListRequest::default_instance_ = NULL;

FileListRequest* FileListRequest::New(::google::protobuf::Arena* arena) const {
  FileListRequest* n = new FileListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.FileListRequest)
  foldername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.FileListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string foldername = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foldername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->foldername().data(), this->foldername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileListRequest.foldername"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:backend.FileListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.FileListRequest)
  return false;
#undef DO_
}

void FileListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.FileListRequest)
  // optional string foldername = 1;
  if (this->foldername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->foldername().data(), this->foldername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileListRequest.foldername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->foldername(), output);
  }

  // @@protoc_insertion_point(serialize_end:backend.FileListRequest)
}

::google::protobuf::uint8* FileListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.FileListRequest)
  // optional string foldername = 1;
  if (this->foldername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->foldername().data(), this->foldername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileListRequest.foldername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->foldername(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:backend.FileListRequest)
  return target;
}

int FileListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.FileListRequest)
  int total_size = 0;

  // optional string foldername = 1;
  if (this->foldername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->foldername());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.FileListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.FileListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.FileListRequest)
    MergeFrom(*source);
  }
}

void FileListRequest::MergeFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.FileListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.foldername().size() > 0) {

    foldername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.foldername_);
  }
}

void FileListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileListRequest::CopyFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListRequest::IsInitialized() const {

  return true;
}

void FileListRequest::Swap(FileListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileListRequest::InternalSwap(FileListRequest* other) {
  foldername_.Swap(&other->foldername_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileListRequest_descriptor_;
  metadata.reflection = FileListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileListRequest

// optional string foldername = 1;
void FileListRequest::clear_foldername() {
  foldername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileListRequest::foldername() const {
  // @@protoc_insertion_point(field_get:backend.FileListRequest.foldername)
  return foldername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileListRequest::set_foldername(const ::std::string& value) {
  
  foldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileListRequest.foldername)
}
 void FileListRequest::set_foldername(const char* value) {
  
  foldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileListRequest.foldername)
}
 void FileListRequest::set_foldername(const char* value, size_t size) {
  
  foldername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileListRequest.foldername)
}
 ::std::string* FileListRequest::mutable_foldername() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileListRequest.foldername)
  return foldername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileListRequest::release_foldername() {
  // @@protoc_insertion_point(field_release:backend.FileListRequest.foldername)
  
  return foldername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileListRequest::set_allocated_foldername(::std::string* foldername) {
  if (foldername != NULL) {
    
  } else {
    
  }
  foldername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), foldername);
  // @@protoc_insertion_point(field_set_allocated:backend.FileListRequest.foldername)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileListReply::kFilelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileListReply::FileListReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.FileListReply)
}

void FileListReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileListReply::FileListReply(const FileListReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.FileListReply)
}

void FileListReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filelist_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  filelist_.SetEntryDescriptor(
      &::backend::FileListReply_FilelistEntry_descriptor_);
}

FileListReply::~FileListReply() {
  // @@protoc_insertion_point(destructor:backend.FileListReply)
  SharedDtor();
}

void FileListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileListReply_descriptor_;
}

const FileListReply& FileListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

FileListReply* FileListReply::default_instance_ = NULL;

FileListReply* FileListReply::New(::google::protobuf::Arena* arena) const {
  FileListReply* n = new FileListReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.FileListReply)
  filelist_.Clear();
}

bool FileListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.FileListReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .backend.FileInfo> filelist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_filelist:
          FileListReply_FilelistEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::backend::FileInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::backend::FileInfo > > parser(&filelist_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileListReply.FilelistEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_filelist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:backend.FileListReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.FileListReply)
  return false;
#undef DO_
}

void FileListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.FileListReply)
  // map<string, .backend.FileInfo> filelist = 1;
  if (!this->filelist().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::backend::FileInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "backend.FileListReply.FilelistEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->filelist().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->filelist().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::backend::FileInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::backend::FileInfo >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FileListReply_FilelistEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(filelist_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FileListReply_FilelistEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::backend::FileInfo >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it) {
        entry.reset(filelist_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:backend.FileListReply)
}

::google::protobuf::uint8* FileListReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.FileListReply)
  // map<string, .backend.FileInfo> filelist = 1;
  if (!this->filelist().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::backend::FileInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "backend.FileListReply.FilelistEntry.key");
      }
    };

    if (deterministic &&
        this->filelist().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->filelist().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::backend::FileInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::backend::FileInfo >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<FileListReply_FilelistEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(filelist_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<FileListReply_FilelistEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::backend::FileInfo >::const_iterator
          it = this->filelist().begin();
          it != this->filelist().end(); ++it) {
        entry.reset(filelist_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:backend.FileListReply)
  return target;
}

int FileListReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.FileListReply)
  int total_size = 0;

  // map<string, .backend.FileInfo> filelist = 1;
  total_size += 1 * this->filelist_size();
  {
    ::google::protobuf::scoped_ptr<FileListReply_FilelistEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::backend::FileInfo >::const_iterator
        it = this->filelist().begin();
        it != this->filelist().end(); ++it) {
      entry.reset(filelist_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileListReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.FileListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileListReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileListReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.FileListReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.FileListReply)
    MergeFrom(*source);
  }
}

void FileListReply::MergeFrom(const FileListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.FileListReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  filelist_.MergeFrom(from.filelist_);
}

void FileListReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.FileListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileListReply::CopyFrom(const FileListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.FileListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListReply::IsInitialized() const {

  return true;
}

void FileListReply::Swap(FileListReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileListReply::InternalSwap(FileListReply* other) {
  filelist_.Swap(&other->filelist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileListReply_descriptor_;
  metadata.reflection = FileListReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileListReply

// map<string, .backend.FileInfo> filelist = 1;
int FileListReply::filelist_size() const {
  return filelist_.size();
}
void FileListReply::clear_filelist() {
  filelist_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::backend::FileInfo >&
FileListReply::filelist() const {
  // @@protoc_insertion_point(field_map:backend.FileListReply.filelist)
  return filelist_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::backend::FileInfo >*
FileListReply::mutable_filelist() {
  // @@protoc_insertion_point(field_mutable_map:backend.FileListReply.filelist)
  return filelist_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfo::kNameFieldNumber;
const int FileInfo::kIsFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfo::FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.FileInfo)
}

void FileInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.FileInfo)
}

void FileInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_file_ = false;
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:backend.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfo_descriptor_;
}

const FileInfo& FileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

FileInfo* FileInfo::default_instance_ = NULL;

FileInfo* FileInfo::New(::google::protobuf::Arena* arena) const {
  FileInfo* n = new FileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.FileInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_file_ = false;
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.FileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_file;
        break;
      }

      // optional bool is_file = 2;
      case 2: {
        if (tag == 16) {
         parse_is_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_file_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:backend.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.FileInfo)
  return false;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.FileInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool is_file = 2;
  if (this->is_file() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_file(), output);
  }

  // @@protoc_insertion_point(serialize_end:backend.FileInfo)
}

::google::protobuf::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.FileInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool is_file = 2;
  if (this->is_file() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_file(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:backend.FileInfo)
  return target;
}

int FileInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.FileInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bool is_file = 2;
  if (this->is_file() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.FileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.FileInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.is_file() != 0) {
    set_is_file(from.is_file());
  }
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {

  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfo::InternalSwap(FileInfo* other) {
  name_.Swap(&other->name_);
  std::swap(is_file_, other->is_file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfo_descriptor_;
  metadata.reflection = FileInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileInfo

// optional string name = 1;
void FileInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:backend.FileInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileInfo.name)
}
 void FileInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileInfo.name)
}
 void FileInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileInfo.name)
}
 ::std::string* FileInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:backend.FileInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:backend.FileInfo.name)
}

// optional bool is_file = 2;
void FileInfo::clear_is_file() {
  is_file_ = false;
}
 bool FileInfo::is_file() const {
  // @@protoc_insertion_point(field_get:backend.FileInfo.is_file)
  return is_file_;
}
 void FileInfo::set_is_file(bool value) {
  
  is_file_ = value;
  // @@protoc_insertion_point(field_set:backend.FileInfo.is_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileChunkRequest::kUsernameFieldNumber;
const int FileChunkRequest::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileChunkRequest::FileChunkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.FileChunkRequest)
}

void FileChunkRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileChunkRequest::FileChunkRequest(const FileChunkRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.FileChunkRequest)
}

void FileChunkRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileChunkRequest::~FileChunkRequest() {
  // @@protoc_insertion_point(destructor:backend.FileChunkRequest)
  SharedDtor();
}

void FileChunkRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileChunkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileChunkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileChunkRequest_descriptor_;
}

const FileChunkRequest& FileChunkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

FileChunkRequest* FileChunkRequest::default_instance_ = NULL;

FileChunkRequest* FileChunkRequest::New(::google::protobuf::Arena* arena) const {
  FileChunkRequest* n = new FileChunkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.FileChunkRequest)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.FileChunkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileChunkRequest.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileChunkRequest.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:backend.FileChunkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.FileChunkRequest)
  return false;
#undef DO_
}

void FileChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.FileChunkRequest)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunkRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunkRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:backend.FileChunkRequest)
}

::google::protobuf::uint8* FileChunkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.FileChunkRequest)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunkRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunkRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:backend.FileChunkRequest)
  return target;
}

int FileChunkRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.FileChunkRequest)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.FileChunkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileChunkRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileChunkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.FileChunkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.FileChunkRequest)
    MergeFrom(*source);
  }
}

void FileChunkRequest::MergeFrom(const FileChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.FileChunkRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void FileChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.FileChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChunkRequest::CopyFrom(const FileChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.FileChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunkRequest::IsInitialized() const {

  return true;
}

void FileChunkRequest::Swap(FileChunkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileChunkRequest::InternalSwap(FileChunkRequest* other) {
  username_.Swap(&other->username_);
  filename_.Swap(&other->filename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileChunkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileChunkRequest_descriptor_;
  metadata.reflection = FileChunkRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileChunkRequest

// optional string username = 1;
void FileChunkRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileChunkRequest::username() const {
  // @@protoc_insertion_point(field_get:backend.FileChunkRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunkRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileChunkRequest.username)
}
 void FileChunkRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileChunkRequest.username)
}
 void FileChunkRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileChunkRequest.username)
}
 ::std::string* FileChunkRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileChunkRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileChunkRequest::release_username() {
  // @@protoc_insertion_point(field_release:backend.FileChunkRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunkRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:backend.FileChunkRequest.username)
}

// optional string filename = 2;
void FileChunkRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileChunkRequest::filename() const {
  // @@protoc_insertion_point(field_get:backend.FileChunkRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunkRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileChunkRequest.filename)
}
 void FileChunkRequest::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileChunkRequest.filename)
}
 void FileChunkRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileChunkRequest.filename)
}
 ::std::string* FileChunkRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileChunkRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileChunkRequest::release_filename() {
  // @@protoc_insertion_point(field_release:backend.FileChunkRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunkRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:backend.FileChunkRequest.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileChunk::kUsernameFieldNumber;
const int FileChunk::kFilenameFieldNumber;
const int FileChunk::kLengthFieldNumber;
const int FileChunk::kFiletypeFieldNumber;
const int FileChunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileChunk::FileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.FileChunk)
}

void FileChunk::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FileChunk::FileChunk(const FileChunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.FileChunk)
}

void FileChunk::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = GOOGLE_ULONGLONG(0);
  filetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileChunk::~FileChunk() {
  // @@protoc_insertion_point(destructor:backend.FileChunk)
  SharedDtor();
}

void FileChunk::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FileChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileChunk_descriptor_;
}

const FileChunk& FileChunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

FileChunk* FileChunk::default_instance_ = NULL;

FileChunk* FileChunk::New(::google::protobuf::Arena* arena) const {
  FileChunk* n = new FileChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.FileChunk)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = GOOGLE_ULONGLONG(0);
  filetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.FileChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileChunk.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileChunk.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional uint64 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_filetype;
        break;
      }

      // optional string filetype = 4;
      case 4: {
        if (tag == 34) {
         parse_filetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filetype().data(), this->filetype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "backend.FileChunk.filetype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:backend.FileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.FileChunk)
  return false;
#undef DO_
}

void FileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.FileChunk)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunk.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunk.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional uint64 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->length(), output);
  }

  // optional string filetype = 4;
  if (this->filetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filetype().data(), this->filetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunk.filetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filetype(), output);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:backend.FileChunk)
}

::google::protobuf::uint8* FileChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.FileChunk)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunk.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunk.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional uint64 length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->length(), target);
  }

  // optional string filetype = 4;
  if (this->filetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filetype().data(), this->filetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "backend.FileChunk.filetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filetype(), target);
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:backend.FileChunk)
  return target;
}

int FileChunk::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.FileChunk)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // optional uint64 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->length());
  }

  // optional string filetype = 4;
  if (this->filetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filetype());
  }

  // optional bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.FileChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileChunk* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.FileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.FileChunk)
    MergeFrom(*source);
  }
}

void FileChunk::MergeFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.FileChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.filetype().size() > 0) {

    filetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filetype_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void FileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChunk::CopyFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunk::IsInitialized() const {

  return true;
}

void FileChunk::Swap(FileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileChunk::InternalSwap(FileChunk* other) {
  username_.Swap(&other->username_);
  filename_.Swap(&other->filename_);
  std::swap(length_, other->length_);
  filetype_.Swap(&other->filetype_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileChunk_descriptor_;
  metadata.reflection = FileChunk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileChunk

// optional string username = 1;
void FileChunk::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileChunk::username() const {
  // @@protoc_insertion_point(field_get:backend.FileChunk.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileChunk.username)
}
 void FileChunk::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileChunk.username)
}
 void FileChunk::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileChunk.username)
}
 ::std::string* FileChunk::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileChunk.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileChunk::release_username() {
  // @@protoc_insertion_point(field_release:backend.FileChunk.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:backend.FileChunk.username)
}

// optional string filename = 2;
void FileChunk::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileChunk::filename() const {
  // @@protoc_insertion_point(field_get:backend.FileChunk.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileChunk.filename)
}
 void FileChunk::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileChunk.filename)
}
 void FileChunk::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileChunk.filename)
}
 ::std::string* FileChunk::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileChunk.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileChunk::release_filename() {
  // @@protoc_insertion_point(field_release:backend.FileChunk.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:backend.FileChunk.filename)
}

// optional uint64 length = 3;
void FileChunk::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 FileChunk::length() const {
  // @@protoc_insertion_point(field_get:backend.FileChunk.length)
  return length_;
}
 void FileChunk::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:backend.FileChunk.length)
}

// optional string filetype = 4;
void FileChunk::clear_filetype() {
  filetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileChunk::filetype() const {
  // @@protoc_insertion_point(field_get:backend.FileChunk.filetype)
  return filetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_filetype(const ::std::string& value) {
  
  filetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileChunk.filetype)
}
 void FileChunk::set_filetype(const char* value) {
  
  filetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileChunk.filetype)
}
 void FileChunk::set_filetype(const char* value, size_t size) {
  
  filetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileChunk.filetype)
}
 ::std::string* FileChunk::mutable_filetype() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileChunk.filetype)
  return filetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileChunk::release_filetype() {
  // @@protoc_insertion_point(field_release:backend.FileChunk.filetype)
  
  return filetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_allocated_filetype(::std::string* filetype) {
  if (filetype != NULL) {
    
  } else {
    
  }
  filetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filetype);
  // @@protoc_insertion_point(field_set_allocated:backend.FileChunk.filetype)
}

// optional bytes data = 5;
void FileChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FileChunk::data() const {
  // @@protoc_insertion_point(field_get:backend.FileChunk.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:backend.FileChunk.data)
}
 void FileChunk::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:backend.FileChunk.data)
}
 void FileChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:backend.FileChunk.data)
}
 ::std::string* FileChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:backend.FileChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FileChunk::release_data() {
  // @@protoc_insertion_point(field_release:backend.FileChunk.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FileChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:backend.FileChunk.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:backend.Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:backend.Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:backend.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_backend_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:backend.Empty)
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:backend.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:backend.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:backend.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:backend.Empty)
  // @@protoc_insertion_point(serialize_end:backend.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:backend.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:backend.Empty)
  return target;
}

int Empty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:backend.Empty)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:backend.Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:backend.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:backend.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:backend.Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:backend.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:backend.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace backend

// @@protoc_insertion_point(global_scope)
