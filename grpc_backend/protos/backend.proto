// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

//option java_multiple_files = true;
//option java_package = "io.grpc.examples.helloworld";
//option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package backend;

// The storage service definition.
service Storage {
  // Frontend Backend Normal Communication
  // Create new user
  rpc CreateUser (UserAccount) returns (Empty) {}
  // Get password
  rpc CheckPassword (UserAccount) returns (UserAccountReply) {}
  // Get file list
  rpc GetFileList (FileListRequest) returns (FileListReply) {}
  // Insert a directory
  rpc InsertFileList (FileListRequest) returns (Empty) {}
  // Upload a file
  rpc PutFile (FileChunk) returns (Empty) {}
  // Update a file
  rpc UpdateFile (FileChunk) returns (Empty) {}
  // Get a file
  rpc GetFile (FileChunkRequest) returns (FileChunk) {}
  // Delete a file
  rpc DeleteFile (FileChunkRequest) returns (Empty) {}
  // Return memtable info to master
  rpc GetMemTableInfo (Empty) returns (MemTableInfo) {}

  // Backend Communication
  rpc GetLog (Empty) returns (Log) {}
  rpc GetBuffer (Empty) returns (Buffer) {}
}

// The request message containing the user/folder's name.
message FileListRequest {
  string foldername = 1; // /username/.../...
}

// The response message containing the files
message FileListReply {
  map<string, FileInfo> filelist= 1;
}

message FileInfo {
    string full_path = 1;
    string name = 2;
    bool is_file = 3;
}

message UserAccount {
    string username = 1;
    string password = 2;
}

message UserAccountReply {
    bool correct = 1;
}

message FileChunkRequest {
    string username = 1; // username
    string filename = 2; // .../.../...
}

message FileChunk {
    string username = 1; // username
    string filename = 2; // .../.../...
    uint64 length = 3;
    string filetype = 4;
    bytes data = 5;
    uint64 orig_length = 6;
    bytes orig_data = 7;
}

message Log {
    int64 size = 1;
    bytes data = 2;
}

message Buffer {
    int64 size = 1;
    bytes data = 2;
}

message Empty {

}

message MemTableInfo {
    uint64 buffer_length = 1;
}